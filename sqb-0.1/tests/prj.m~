close all; clear;

my_data = readtable('data.csv');

rows = isnan(my_data.shot_made_flag);
rows2 = isfinite(my_data.shot_made_flag);

my_data.time_remaining = 60 * my_data.minutes_remaining + my_data.seconds_remaining;
[C, ia, my_data.action_type_num] = unique(my_data.action_type);
[C, ia, my_data.combined_shot_type_num] = unique(my_data.combined_shot_type);
[C, ia, my_data.season_num] = unique(my_data.season);
[C, ia, my_data.shot_type_num] = unique(my_data.shot_type);
[C, ia, my_data.shot_zone_area_num] = unique(my_data.shot_zone_area);
[C, ia, my_data.shot_zone_basic_num] = unique(my_data.shot_zone_basic);
[C, ia, my_data.action_type_num] = unique(my_data.action_type);
[C, ia, my_data.opponent_num] = unique(my_data.opponent);

train_data = my_data(rows2,[3:10,14,26:33]);
test_data = my_data(rows,[3:10,14,26:33]);
train_label = my_data(rows2, 15);
test_label = my_data(rows, 15);

MEX_PATH = '../build';
addpath(MEX_PATH);

opts = [];
opts.loss = 'logloss'; % can be logloss or exploss
opts.shrinkageFactor = 0.1;
opts.subsamplingFactor = 0.5;
opts.maxTreeDepth = uint32(6);  % this was the default before customization
opts.randSeed = uint32(rand()*1000);

numIters = 20;
tic;
model = SQBMatrixTrain(single(train_data), train_label, uint32(numIters), opts);
toc